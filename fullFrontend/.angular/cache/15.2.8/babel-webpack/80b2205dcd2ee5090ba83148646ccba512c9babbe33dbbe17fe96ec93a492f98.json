{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { APIEndpointURLs } from '../../../api-endpoint-urls';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AccountService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.currentUser = new Subject();\n    this.TOKEN = 'token';\n    const token = localStorage.getItem(this.TOKEN);\n    if (token) {\n      const jwt = new JwtHelperService();\n      this.currentUser.next(jwt.decodeToken(token));\n    }\n  }\n  login(email, password) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Basic ' + btoa(email + ':' + password)\n    });\n    return this.http.post(APIEndpointURLs.loginUrl, {}, {\n      headers\n    }).pipe(map(response => {\n      const result = response[this.TOKEN];\n      if (result) {\n        localStorage.setItem(this.TOKEN, result);\n        // const jwt = new JwtHelperService();\n        // const tempUser: User = jwt.decodeToken(localStorage.getItem(this.TOKEN));\n        // console.log('tempUser: ', tempUser);\n        //\n        // if (tempUser.lastName === 'invalid') {\n        //   localStorage.removeItem(this.TOKEN);\n        //   return false;\n        // }\n        //\n        // this.currentUser.next(tempUser);\n        console.log('Token:', result); // Log the token in the console\n        return true;\n      } else {\n        return false;\n      }\n    }));\n  }\n  getUserId() {\n    console.log('getUserId running...');\n    const token = localStorage.getItem(this.TOKEN);\n    if (token) {\n      const jwtHelper = new JwtHelperService();\n      const decodedToken = jwtHelper.decodeToken(token);\n      console.log('Decoded Token:', decodedToken); // Log the decoded token object\n      if (decodedToken && decodedToken.jti) {\n        // Access the user ID from the 'jti' property\n        console.log('User ID:', decodedToken.jti); // Log the user ID\n        return decodedToken.jti; // Return the user ID\n      }\n    }\n\n    return null;\n  }\n  logout() {\n    localStorage.removeItem(this.TOKEN);\n    // this.currentUser.next(null);\n    this.router.navigate(['home']);\n  }\n  isLoggedIn() {\n    const jwt = new JwtHelperService();\n    const token = localStorage.getItem(this.TOKEN);\n    return !jwt.isTokenExpired(token);\n  }\n  register(user) {\n    return this.http.post(APIEndpointURLs.registerUrl, user);\n  }\n  getToken() {\n    return localStorage.getItem(this.TOKEN);\n  }\n}\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","APIEndpointURLs","JwtHelperService","Subject","map","AccountService","constructor","http","router","token","localStorage","getItem","TOKEN","jwt","currentUser","next","decodeToken","login","email","password","headers","Authorization","btoa","post","loginUrl","pipe","response","result","setItem","console","log","getUserId","jwtHelper","decodedToken","jti","logout","removeItem","navigate","isLoggedIn","isTokenExpired","register","user","registerUrl","getToken","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\vrenc\\OneDrive\\Documents\\I N T E R N S H I P\\fullFrontend\\src\\app\\account\\component\\services\\account.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { APIEndpointURLs } from '../../../api-endpoint-urls';\r\nimport { Injectable } from '@angular/core';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { User } from '../../../users/models/user.model';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AccountService {\r\n  currentUser: Subject<User> = new Subject<User>();\r\n\r\n  private readonly TOKEN = 'token';\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n    const token = localStorage.getItem(this.TOKEN);\r\n    if (token) {\r\n      const jwt = new JwtHelperService();\r\n      this.currentUser.next(jwt.decodeToken<User>(token) as User);\r\n    }\r\n  }\r\n\r\n  login(email: string, password: string) {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      Authorization: 'Basic ' + btoa(email + ':' + password),\r\n    });\r\n    return this.http.post<any>(APIEndpointURLs.loginUrl, {}, { headers }).pipe(\r\n      map((response) => {\r\n        const result = response[this.TOKEN];\r\n        if (result) {\r\n          localStorage.setItem(this.TOKEN, result);\r\n          // const jwt = new JwtHelperService();\r\n          // const tempUser: User = jwt.decodeToken(localStorage.getItem(this.TOKEN));\r\n          // console.log('tempUser: ', tempUser);\r\n          //\r\n          // if (tempUser.lastName === 'invalid') {\r\n          //   localStorage.removeItem(this.TOKEN);\r\n          //   return false;\r\n          // }\r\n          //\r\n          // this.currentUser.next(tempUser);\r\n\r\n          console.log('Token:', result); // Log the token in the console\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  getUserId(): string | null {\r\n  console.log('getUserId running...');\r\n  const token = localStorage.getItem(this.TOKEN);\r\n  if (token) {\r\n    const jwtHelper = new JwtHelperService();\r\n    const decodedToken = jwtHelper.decodeToken(token);\r\n    console.log('Decoded Token:', decodedToken); // Log the decoded token object\r\n    if (decodedToken && decodedToken.jti) { // Access the user ID from the 'jti' property\r\n      console.log('User ID:', decodedToken.jti); // Log the user ID\r\n      return decodedToken.jti; // Return the user ID\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n  logout() {\r\n    localStorage.removeItem(this.TOKEN);\r\n    // this.currentUser.next(null);\r\n    this.router.navigate(['home']);\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    const jwt = new JwtHelperService();\r\n    const token = localStorage.getItem(this.TOKEN);\r\n    return !jwt.isTokenExpired(token);\r\n  }\r\n\r\n  register(user: User) {\r\n    return this.http.post(APIEndpointURLs.registerUrl, user);\r\n  }\r\n\r\n  getToken(): string {\r\n    return localStorage.getItem(this.TOKEN) as string;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}